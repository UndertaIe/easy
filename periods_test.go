package easy

import (
	"fmt"
	"reflect"
	"testing"
)

type TestCase[n number] struct {
	testCase []Period[n]
	expect   []Period[n]
}

var testcases = [...]TestCase[int64]{
	{
		[]Period[int64]{{60, 70, 10}, {30, 40, 10}},
		[]Period[int64]{{30, 40, 10}, {60, 70, 10}},
	},
	{
		[]Period[int64]{{30, 40, 10}, {60, 70, 10}},
		[]Period[int64]{{30, 40, 10}, {60, 70, 10}},
	},
	{
		[]Period[int64]{{30, 40, 10}, {40, 50, 10}},
		[]Period[int64]{{30, 40, 10}, {40, 50, 10}},
	},
	{
		[]Period[int64]{{30, 40, 10}, {35, 40, 10}},
		[]Period[int64]{{30, 35, 10}, {35, 40, 20}},
	},
	{
		[]Period[int64]{{30, 40, 10}, {35, 45, 10}},
		[]Period[int64]{{30, 35, 10}, {35, 40, 20}, {40, 45, 10}},
	},
	{
		[]Period[int64]{{90, 100, 10}, {100, 110, 20}, {95, 105, 15}},
		[]Period[int64]{{90, 95, 10}, {95, 100, 25}, {100, 105, 35}, {105, 110, 20}},
	},
	{
		[]Period[int64]{{80, 85, 10}, {80, 85, 10}, {90, 100, 10}, {95, 105, 15}},
		[]Period[int64]{{80, 85, 20}, {90, 95, 10}, {95, 100, 25}, {100, 105, 15}},
	},
	{
		[]Period[int64]{{50, 100, 20}, {50, 70, 20}, {70, 90, 10}},
		[]Period[int64]{{50, 70, 40}, {70, 90, 30}, {90, 100, 20}},
	},
	{
		[]Period[int64]{{50, 100, 20}, {50, 70, 20}, {70, 90, 10}},
		[]Period[int64]{{50, 70, 40}, {70, 90, 30}, {90, 100, 20}},
	},
	{
		[]Period[int64]{{10, 20, 10}, {15, 25, 10}, {20, 30, 10}},
		[]Period[int64]{{10, 15, 10}, {15, 20, 20}, {20, 25, 20}, {25, 30, 10}},
	},
	{
		[]Period[int64]{{20, 30, 10}, {10, 20, 10}, {15, 25, 10}},
		[]Period[int64]{{10, 15, 10}, {15, 20, 20}, {20, 25, 20}, {25, 30, 10}},
	},
	{
		[]Period[int64]{{20, 30, 10}, {10, 20, 10}, {15, 25, 10}},
		[]Period[int64]{{10, 15, 10}, {15, 20, 20}, {20, 25, 20}, {25, 30, 10}},
	},
	{
		[]Period[int64]{{10, 15, 5}, {12, 18, 6}, {14, 20, 8}, {16, 20, 10}},
		[]Period[int64]{{10, 12, 5}, {12, 14, 11}, {14, 15, 19}, {15, 16, 14}, {16, 18, 24}, {18, 20, 18}},
	},
}

func TestMergePeriods(t *testing.T) {
	for _, tc := range testcases {
		got := MergePeriods(tc.testCase...)

		if !reflect.DeepEqual(got, tc.expect) {
			fmt.Println(fmt.Sprintf("got   : %v", got))
			fmt.Println(fmt.Sprintf("expect: %v", tc.expect))

			t.Fail()
		}
	}
}
